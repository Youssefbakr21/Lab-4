//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"

//=====[Defines]===============================================================

#define NUMBER_OF_AVG_SAMPLES                   100
#define TIME_INCREMENT_MS                       500  // Update every 500ms

//=====[Declaration and initialization of public global objects]===============

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);
AnalogIn lm35(A1);

//=====[Declaration and initialization of public global variables]=============

float lm35ReadingsAverage  = 0.0;
float lm35ReadingsSum      = 0.0;
float lm35ReadingsArray[NUMBER_OF_AVG_SAMPLES];
float lm35TempC            = 0.0;

//=====[Declarations (prototypes) of public functions]=========================

float analogReadingScaledWithTheLM35Formula(float analogReading);
void updateTemperature();
void displayTemperature();

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    char str[30];
    int stringLength;
    
    // Initialize temperature array
    for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsArray[i] = 0.0;
    }
    
    sprintf(str, "Temperature Monitor\r\n");
    stringLength = strlen(str);
    uartUsb.write(str, stringLength);
    
    while (true) {
        updateTemperature();
        displayTemperature();
        delay(TIME_INCREMENT_MS);
    }
}

//=====[Implementations of public functions]===================================

void updateTemperature()
{
    static int lm35SampleIndex = 0;
    
    // Add new sample to array
    lm35ReadingsArray[lm35SampleIndex] = lm35.read();
    lm35SampleIndex++;
    if (lm35SampleIndex >= NUMBER_OF_AVG_SAMPLES) {
        lm35SampleIndex = 0;
    }
    
    // Calculate average of samples
    lm35ReadingsSum = 0.0;
    for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsSum = lm35ReadingsSum + lm35ReadingsArray[i];
    }
    lm35ReadingsAverage = lm35ReadingsSum / NUMBER_OF_AVG_SAMPLES;
    
    // Convert to Celsius
    lm35TempC = analogReadingScaledWithTheLM35Formula(lm35ReadingsAverage);
}

void displayTemperature()
{
    char str[30];
    int stringLength;
    
    sprintf(str, "Temperature: %.2f Â°C\r\n", lm35TempC);
    stringLength = strlen(str);
    uartUsb.write(str, stringLength);
}

float analogReadingScaledWithTheLM35Formula(float analogReading)
{
    return (analogReading * 3.3 / 0.01);
}
