//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"

//=====[Defines]===============================================================

#define NUMBER_OF_AVG_SAMPLES                   100
#define OVER_TEMP_LEVEL                         50
#define TIME_INCREMENT_MS                       500  // Update every 500ms

//=====[Declaration and initialization of public global objects]===============

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);
DigitalIn mq2(PE_12);  // Gas sensor connected to PE_12
AnalogIn lm35(A1);     // Temperature sensor connected to A1
DigitalOut alarmLed(LED1);  // Using LED1 to visually indicate alarms

//=====[Declaration and initialization of public global variables]=============

bool gasDetectorState = OFF;
bool overTempDetectorState = OFF;
bool alarmState = OFF;

float lm35ReadingsAverage  = 0.0;
float lm35ReadingsSum      = 0.0;
float lm35ReadingsArray[NUMBER_OF_AVG_SAMPLES];
float lm35TempC            = 0.0;

// Track previous alarm states to detect changes
bool prevGasAlarm = OFF;
bool prevTempAlarm = OFF;

//=====[Declarations (prototypes) of public functions]=========================

void initOutputs();
void updateTemperatue();
void checkAlarms();
void displayAlarmStatus();
float analogReadingScaledWithTheLM35Formula(float analogReading);

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    char str[50];
    int stringLength;
    
    // Initialize outputs and temperature array
    initOutputs();
    for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsArray[i] = 0.0;
    }
    
    // Display startup message
    sprintf(str, "Alarm Source Monitor\r\n");
    stringLength = strlen(str);
    uartUsb.write(str, stringLength);
    sprintf(str, "Monitoring gas and temperature sensors\r\n\r\n");
    stringLength = strlen(str);
    uartUsb.write(str, stringLength);
    
    while (true) {
        updateTemperatue();
        checkAlarms();
        displayAlarmStatus();
        delay(TIME_INCREMENT_MS);
    }
}

//=====[Implementations of public functions]===================================

void initOutputs()
{
    alarmLed = OFF;
}

void updateTemperatue()
{
    static int lm35SampleIndex = 0;
    
    // Add new sample to array
    lm35ReadingsArray[lm35SampleIndex] = lm35.read();
    lm35SampleIndex++;
    if (lm35SampleIndex >= NUMBER_OF_AVG_SAMPLES) {
        lm35SampleIndex = 0;
    }
    
    // Calculate average of samples
    lm35ReadingsSum = 0.0;
    for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsSum = lm35ReadingsSum + lm35ReadingsArray[i];
    }
    lm35ReadingsAverage = lm35ReadingsSum / NUMBER_OF_AVG_SAMPLES;
    
    // Convert to Celsius
    lm35TempC = analogReadingScaledWithTheLM35Formula(lm35ReadingsAverage);
}

void checkAlarms()
{
    // Check for temperature alarm
    if (lm35TempC > OVER_TEMP_LEVEL) {
        overTempDetectorState = ON;
    } else {
        overTempDetectorState = OFF;
    }
    
    // Check for gas alarm (MQ2 returns LOW when gas is detected)
    if (!mq2) {
        gasDetectorState = ON;
    } else {
        gasDetectorState = OFF;
    }
    
    // Set overall alarm state
    alarmState = gasDetectorState || overTempDetectorState;
    
    // Update LED based on alarm state
    alarmLed = alarmState;
}

void displayAlarmStatus()
{
    char str[100];
    int stringLength;
    
    // Display temperature reading
    sprintf(str, "Current temperature: %.2f Â°C\r\n", lm35TempC);
    stringLength = strlen(str);
    uartUsb.write(str, stringLength);
    
    // Display alarm messages when a state changes or alarm is active
    if (gasDetectorState != prevGasAlarm || overTempDetectorState != prevTempAlarm || alarmState) {
        if (gasDetectorState && overTempDetectorState) {
            sprintf(str, "ALARM: Multiple Alarms - Gas AND Temperature!\r\n");
            stringLength = strlen(str);
            uartUsb.write(str, stringLength);
        } else if (gasDetectorState) {
            sprintf(str, "ALARM: Gas Detected!\r\n");
            stringLength = strlen(str);
            uartUsb.write(str, stringLength);
        } else if (overTempDetectorState) {
            sprintf(str, "ALARM: Temperature Above Maximum Level!\r\n");
            stringLength = strlen(str);
            uartUsb.write(str, stringLength);
        } else if (!alarmState && (prevGasAlarm || prevTempAlarm)) {
            sprintf(str, "All alarms cleared\r\n");
            stringLength = strlen(str);
            uartUsb.write(str, stringLength);
        }
    }
    
    // Update previous states
    prevGasAlarm = gasDetectorState;
    prevTempAlarm = overTempDetectorState;
}

float analogReadingScaledWithTheLM35Formula(float analogReading)
{
    return (analogReading * 3.3 / 0.01);
}
